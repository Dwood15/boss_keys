package ootrcompat

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"strings"

	"github.com/dwood15/bosskeys/bk"
)

type OoTRItems map[bk.NodeName]bk.KeyName
type OotRRequirement string
type OotRLocations map[bk.NodeName]OotRRequirement
type OotRregion struct {
	RegionName string `json:"region_name"`
	Locations  OotRLocations
	Exits      OotRLocations
}

func ConvertOOTR(wd string) {
	itms := loadItems(wd + "items/")

	ogItmCt := len(itms)
	println("loaded: [", ogItmCt, "] itms loaded")
	if ogItmCt == 0 {
		panic("no items were loaded from the static files. this is not acceptable")
	}

	regs := loadRegions(wd + "areas/")
	println("loaded: [", len(regs), "] regions. converting to nodes")

	ns := make([]bk.Node, 0, len(regs))

	for _, r := range regs {
		ns = append(ns, r.ToNodeChunk(itms)...)
	}


	if len(itms) != 0 {
		print("NOT ALL items were successfully removed from the pool. Num Remaining: ", len(itms))
		for k := range itms {
			println("Item Location: [", k, "] not found in loaded regions")
			println("Press enter when ready to continue")
			_, _ = fmt.Scanln()
		}
	}

	println("nodes completed and appended: ", len(ns), "total nodes now exist. dumping to file")

	b, err := json.MarshalIndent(ns, "", "  ")

	if err != nil {
		panic(err)
	}

	if err = ioutil.WriteFile("tmp_oot_nodes.json", b, 0644); err != nil {
		panic(err)
	}

	println("ootr dumps back to file are complete!")
}


//bad func sig yes I know, leave me alone (. __ .)
func locationToNode(iBL OoTRItems, rnName, k bk.NodeName, req OotRRequirement, isExit bool) bk.Node {
	n := bk.NewNode()

	n.Name = k
	n.Class = bk.OneWayPortal
	n.Comment = "automatically generated by ToNodeChunk"

	if req != "True" {
		//These casts are pretty horrible, but left here deliberately to remind
		//that the Requires
		n.Requires = bk.KeyPhrase(req)
	}

	if isExit {
		n.Exits = []bk.NodeName{rnName}
	}

	itmName, ok := iBL[k]
	if ok {
		n.OnVisit.Gives = []bk.KeyName{itmName}
		n.OnVisit.SelfDestructs = !isExit
		delete(iBL, k)
	} else {
		n.OnVisit = nil
	}

	return n
}

func (otr OotRregion) ToNodeChunk(itemsByLoc OoTRItems) (nl []bk.Node) {
	//A region is a node of class hub
	var rNode bk.Node
	rNode.Name = bk.NodeName(otr.RegionName)
	rNode.Class = bk.Hub

	numNew := len(otr.Locations) + len(otr.Exits)
	rNode.Exits = make([]bk.NodeName, 0, numNew)
	nl = make([]bk.Node, 0, numNew)

	//A Location is a loopback - it's only connected to the parent area, and once visited,
	//with requirements _met_, self-destructs, so it can't be visited by the search algo
	//again, helping improve search performance as it runs.
	// ALL locations give something
	for k, v := range otr.Locations {
		rNode.Exits = append(rNode.Exits, k)

		n := locationToNode(itemsByLoc, rNode.Name, k, v, true)
		nl = append(nl, n)
	}

	//An Exit is considered the same as a Location, a repeatable portal
	for k, v := range otr.Exits {
		rNode.Exits = append(rNode.Exits, k)

		n := locationToNode(itemsByLoc, rNode.Name, k, v, false)
		nl = append(nl, n)
	}

	return nl
}
//spaces become underscores. dumb conversion
func toLowerSnake(s string) string {
	return strings.ToLower(strings.ReplaceAll(s, " ", "_"))
}
